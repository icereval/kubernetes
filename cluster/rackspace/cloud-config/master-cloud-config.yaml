#cloud-config

write_files:
  - path: /opt/kubernetes/.cloud_auth
    permissions: 0600
    content: |
      [Global]
      auth-url = OS_AUTH_URL
      username = OS_USERNAME
      api-key = OS_PASSWORD
      tenant-id = OS_TENANT_NAME
      region = OS_REGION_NAME

      [LoadBalancer]
      subnet-id = 11111111-1111-1111-1111-111111111111
  - path: /run/rackspace-setup-environment.sh
    permissions: '0755'
    content: |
      #!/bin/bash

      ENV="/etc/environment"

      sed -i -e '/^COREOS_PUBLIC_IPV4=/d' \
          -e '/^COREOS_PRIVATE_IPV4=/d' \
          "${ENV}"

      # We spin loop until the the IP addresses are set
      function get_ip () {
          IF=$1
          IP=
          while [ 1 ]; do
              IP=$(ifconfig $IF | awk '/inet / {print $2}')
              if [ "$IP" != "" ]; then
                  break
              fi
              sleep .1
          done
          echo $IP
      }

      COREOS_PUBLIC_IPV4=$(get_ip eth0)
      COREOS_PRIVATE_IPV4=$(get_ip eth2)

      echo COREOS_PUBLIC_IPV4=$COREOS_PUBLIC_IPV4 >> $ENV
      echo COREOS_PRIVATE_IPV4=$COREOS_PRIVATE_IPV4 >> $ENV

      # systemd does not perform environment variable expansion, thus no drop-ins.
      # http://www.freedesktop.org/software/systemd/man/systemd.exec.html#Environment=
      echo ETCD_ADVERTISE_CLIENT_URLS=http://$COREOS_PRIVATE_IPV4:2379 >> $ENV
      echo ETCD_INITIAL_ADVERTISE_PEER_URLS=http://$COREOS_PRIVATE_IPV4:2380 >> $ENV
      echo ETCD_LISTEN_CLIENT_URLS=http://localhost:2379,http://$COREOS_PRIVATE_IPV4:2379 >> $ENV
      echo ETCD_LISTEN_PEER_URLS=http://$COREOS_PRIVATE_IPV4:2380 >> $ENV
      #
      echo FLEET_PUBLIC_IP=$COREOS_PRIVATE_IPV4 >> $ENV
  - path: /etc/profile.d/basepath.sh
    permissions: 0644
    owner: core
    content: |
      export PATH="/opt/bin:$PATH"
  - path: /etc/profile.d/etcdctl.sh
    permissions: 0644
    owner: core
    content: |
      export ETCDCTL_PEERS=http://127.0.0.1:2379
  - path: /etc/profile.d/etcdctl.sh
    permissions: 0644
    owner: core
    content: |
      export ETCDCTL_PEERS=http://127.0.0.1:2379
  - path: /etc/profile.d/fleetctl.sh
    permissions: 0644
    owner: core
    content: |
      export FLEETCTL_ENDPOINT=http://127.0.0.1:2379
coreos:
  etcd:
    discovery: https://discovery.etcd.io/DISCOVERY_ID
    ca_file: /etc/ssl/etcd/certs/ca.crt
    cert_file: /etc/ssl/etcd/certs/server.crt
    key_file: /etc/ssl/etcd/private/server.key
    peer_ca_file: /etc/ssl/etcd/certs/ca.crt
    peer_cert_file: /etc/ssl/etcd/certs/peer.crt
    peer_key_file: /etc/ssl/etcd/private/peer.key
  flannel:
    etcd_endpoints: http://localhost:2379
    etcd_cafile: /etc/ssl/etcd/certs/ca.crt
    etcd_certfile: /etc/ssl/etcd/certs/client.crt
    etcd_keyfile: /etc/ssl/etcd/private/client.key
    interface: eth2
    ip_masq: yes
  fleet:
    metadata: kubernetes_role=master
    etcd_servers: http://127.0.0.1:2379
  update:
    reboot-strategy: etcd-lock
  units:
    - name: rackspace-setup-environment.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Setup environment with private (and public) IP addresses
        Wants=coreos-setup-environment.service
        After=coreos-setup-environment.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/run/rackspace-setup-environment.sh
    - name: etcd-ssl-certificates.path
      command: start
      content: |
        [Path]
        PathExists=/etc/ssl/etcd/private
    - name: etcd-ssl-certificates.service
      content: |
        [Unit]
        Requires=etcd.service
        After=etcd.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/systemctl start fleet
        ExecStart=/usr/bin/systemctl start flanneld
    - name: etcd.service
      content: |
        [Unit]
        Description=etcd 2.0
        Requires=early-docker.service
        After=early-docker.service
        Before=early-docker.target

        [Service]
        TimeoutStartSec=0
        EnvironmentFile=/etc/environment
        Environment=DOCKER_HOST=unix:///var/run/early-docker.sock
        Environment=ETCD_DATA_DIR=/var/lib/etcd
        Environment=ETCD_NAME=%m
        ExecStartPre=-/usr/bin/docker kill etcd
        ExecStartPre=-/usr/bin/docker rm etcd
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/etcd:v2.0.5
        ExecStart=/usr/bin/docker run \
          --net host \
          --name etcd \
          -v /opt/etcd:/opt/etcd \
          -v /usr/share/ca-certificates:/etc/ssl/certs \
          -v /etc/ssl/etcd:/etc/ssl/etcd \
          quay.io/coreos/etcd:v2.0.5 \
          -data-dir ${ETCD_DATA} \
          -name ${ETCD_NAME} \
          -discovery ${ETCD_DISCOVERY} \
          -ca-file ${ETCD_CA_FILE} \
          -cert-file ${ETCD_CERT_FILE} \
          -key-file ${ETCD_KEY_FILE} \
          -peer-ca-file ${ETCD_PEER_CA_FILE} \
          -peer-cert-file ${ETCD_PEER_CERT_FILE} \
          -peer-key-file ${ETCD_PEER_KEY_FILE} \
          -advertise-client-urls ${ETCD_ADVERTISE_CLIENT_URLS} \
          -initial-advertise-peer-urls ${ETCD_INITIAL_ADVERTISE_PEER_URLS} \
          -listen-client-urls ${ETCD_LISTEN_CLIENT_URLS} \
          -listen-peer-urls ${ETCD_LISTEN_PEER_URLS}
        ExecStop=/usr/bin/docker kill etcd
        SyslogIdentifier=etcd
        Restart=always
        RestartSec=10s
    - name: fleet.service
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            EnvironmentFile=/etc/environment
    - name: flanneld.service
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'
    - name: update-etcdctl.service
      command: start
      content: |
          [Unit]
          Descritpion=updates etcdctl to v2.0
          After=network-online.target
          Requires=network-online.target

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          ExecStart=/usr/bin/curl -L https://github.com/coreos/etcd/releases/download/v2.0.5/etcd-v2.0.5-linux-amd64.tar.gz -o /tmp/etcd-v2.0.5-linux-amd64.tar.gz
          ExecStart=/usr/bin/tar zxf /tmp/etcd-v2.0.5-linux-amd64.tar.gz -C /tmp
          ExecStart=/usr/bin/mkdir -p /opt/bin
          ExecStart=/usr/bin/cp /tmp/etcd-v2.0.5-linux-amd64/etcdctl /opt/bin/
    # - name: download-kubernetes.service
    #   command: start
    #   content: |
    #     [Unit]
    #     Description=Downloads Kubernetes Release
    #     After=network-online.target
    #     Requires=network-online.target
    #
    #     [Service]
    #     Type=oneshot
    #     RemainAfterExit=yes
    #     ExecStartPre=/usr/bin/wget CLOUD_FILES_URL -O /tmp/kubernetes.tar.gz
    #     ExecStartPre=/usr/bin/mkdir -p /opt/kubernetes
    #     ExecStart=/usr/bin/tar xzf /tmp/kubernetes.tar.gz --strip 1 -C /opt/kubernetes/
    # - name: kube-apiserver.service
    #   command: start
    #   content: |
    #     [Unit]
    #     Description=Kubernetes API Server
    #     Documentation=https://github.com/GoogleCloudPlatform/kubernetes
    #     After=download-kubernetes.service
    #     Requires=download-kubernetes.service
    #     After=etcd.service
    #     Requires=etcd.service
    #     ConditionPathExists=/etc/ssl/kubernetes/
    #
    #     [Service]
    #     EnvironmentFile=/etc/environment
    #     ExecStartPre=/usr/bin/ln -sf /opt/kubernetes/server/bin/kube-apiserver /opt/kubernetes/bin/kube-apiserver
    #     ExecStart=/opt/kubernetes/bin/kube-apiserver \
    #       --address=127.0.0.1 \
    #       --port=8080 \
    #       --etcd_servers=http://127.0.0.1:4001 \
    #       --portal_net=PORTAL_NET \
    #       --logtostderr=true \
    #       --cloud_provider=rackspace \
    #       --cloud_config=/opt/kubernetes/.cloud_auth \
    #       --v=2 \
    #       --public_address_override=${COREOS_PRIVATE_IPV4} \
    #       --tls_cert_file=/etc/ssl/kubernetes/server.crt \
    #       --tls_private_key_file=/etc/ssl/kubernetes/private/server.key
    #     Restart=always
    #     RestartSec=2
    # - name: kube-apiserver-advertiser.service
    #   command: start
    #   content: |
    #     [Unit]
    #     Description=Kubernetes Apiserver Advertiser
    #     After=kube-apiserver.service
    #     Requires=kube-apiserver.service
    #
    #     [Service]
    #     EnvironmentFile=/etc/environment
    #     ExecStart=/bin/sh -c 'etcdctl set /corekube/apiservers/${COREOS_PRIVATE_IPV4} ${COREOS_PRIVATE_IPV4}'
    #     Restart=always
    #     RestartSec=120
    # - name: kube-controller-manager.service
    #   command: start
    #   content: |
    #     [Unit]
    #     Description=Kubernetes Controller Manager
    #     Documentation=https://github.com/GoogleCloudPlatform/kubernetes
    #     After=kube-apiserver.service
    #     Requires=kube-apiserver.service
    #
    #     [Service]
    #     ExecStartPre=/usr/bin/ln -sf /opt/kubernetes/server/bin/kube-controller-manager /opt/kubernetes/bin/kube-controller-manager
    #     ExecStart=/opt/kubernetes/bin/kube-controller-manager \
    #       --master=127.0.0.1:8080 \
    #       --logtostderr=true \
    #       --cloud_provider=rackspace \
    #       --cloud_config=/opt/kubernetes/.cloud_auth \
    #       --v=2
    #     Restart=always
    #     RestartSec=2
    # - name: kube-scheduler.service
    #   command: start
    #   content: |
    #     [Unit]
    #     Description=Kubernetes Scheduler
    #     Documentation=https://github.com/GoogleCloudPlatform/kubernetes
    #     After=kube-apiserver.service
    #     Requires=kube-apiserver.service
    #
    #     [Service]
    #     ExecStartPre=/usr/bin/ln -sf /opt/kubernetes/server/bin/kube-scheduler /opt/kubernetes/bin/kube-scheduler
    #     ExecStart=/opt/kubernetes/bin/kube-scheduler \
    #       --master=127.0.0.1:8080 \
    #       --logtostderr=true
    #     Restart=always
    #     RestartSec=10
    # - name: kube-register.service
    #   command: start
    #   content: |
    #     [Unit]
    #     Description=Kubernetes Registration Service
    #     Documentation=https://github.com/kelseyhightower/kube-register
    #     After=kube-apiserver.service
    #     Requires=kube-apiserver.service
    #
    #     [Service]
    #     ExecStartPre=/usr/bin/wget -N -P /opt/kubernetes/bin http://storage.googleapis.com/kub/kube-register
    #     ExecStartPre=/usr/bin/chmod +x /opt/kubernetes/bin/kube-register
    #     ExecStart=/opt/kubernetes/bin/kube-register \
    #       --metadata=kubernetes_role=minion \
    #       --fleet-endpoint=unix:///var/run/fleet.sock \
    #       --api-endpoint=http://127.0.0.1:8080
    #     Restart=always
    #     RestartSec=10
    # #Running nginx service with --net="host" is a necessary evil until running all k8s services in docker.
    # - name: kubernetes-nginx.service
    #   command: start
    #   content: |
    #     [Unit]
    #     Description=Kubernetes Nginx Service
    #     After=network-online.target
    #     Requires=network-online.target
    #     After=docker.service
    #     Requires=docker.service
    #
    #     [Service]
    #     ExecStartPre=/opt/bin/git-kubernetes-nginx.sh
    #     ExecStartPre=-/usr/bin/docker rm kubernetes_nginx
    #     ExecStart=/usr/bin/docker run --rm --net="host" -p "443:443" -t --name "kubernetes_nginx" kubernetes_nginx
    #     ExecStop=/usr/bin/docker stop kubernetes_nginx
    #     Restart=always
    #     RestartSec=15
    #     git clone https://github.com/thommay/kubernetes_nginx /opt/kubernetes_nginx
    #     /usr/bin/cp /opt/.kubernetes_auth_nginx /opt/kubernetes_nginx/.kubernetes_auth
    #     /opt/kubernetes_nginx/git-kubernetes-nginx.sh
